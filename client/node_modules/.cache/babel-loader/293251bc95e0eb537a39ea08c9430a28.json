{"ast":null,"code":"var _jsxFileName = \"/Users/matthewschnapp/Projects/toolreact-ToolReact/client/src/components/leftbar/Leftbar.js\";\nimport React from 'react';\nimport ToolView from '../tools/viewTools/ToolView';\nimport Tools from '../tools/viewTools/Tools'; //change loadId import files to match accurate database\n\nclass Leftbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: null,\n      toolNumber: \"\",\n      results: [],\n      lines: []\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          results = _this$state.results,\n          toolNumber = _this$state.toolNumber;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: searchBar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      id: \"search\",\n      value: toolNumber,\n      onChange: e => this.onChange(e),\n      placeholder: \"Enter Tool Number\",\n      style: searchText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"searchEx\",\n      style: searchButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Search\")), React.createElement(\"div\", {\n      style: resultStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(Results, {\n      results: results,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })));\n  }\n\n  onChange({\n    target: {\n      toolNumber\n    }\n  }) {\n    const _this$state2 = this.state,\n          id = _this$state2.id,\n          lines = _this$state2.lines;\n    this.setState(() => ({\n      toolNumber\n    }));\n\n    if (lines && id) {\n      return this.setState(() => ({\n        results: this.search(lines, id, toolNumber)\n      }));\n    }\n\n    loadId().then(({\n      id,\n      lines\n    }) => {\n      this.setState(() => ({\n        id,\n        lines,\n        results: this.search(lines, id, toolNumber)\n      }));\n    }).catch(err => console.error(err));\n  }\n\n  search(lines, id, query) {\n    return id.search(query.trim()).map(match => lines[match.ref]);\n  }\n\n}\n\nconst Results = ({\n  results\n}) => {\n  if (results.length) {\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, results.map((result, i) => React.createElement(\"li\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, result)));\n  }\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"No Results\");\n};\n\nfunction loadId() {\n  return Promise.all([import(Tools), import(ToolView)]).then(([{\n    Id\n  }, {\n    id,\n    lines\n  }]) => {\n    return {\n      id: Id.load(id),\n      lines\n    };\n  });\n}\n\nconst searchBar = {\n  display: 'flex',\n  flexDirection: 'column'\n};\nconst searchButton = {\n  fontSize: '20px',\n  width: 'auto',\n  height: '30px',\n  borderRadius: '.25rem',\n  alignSelf: 'center',\n  textAlign: 'center',\n  marginLeft: '.25rem',\n  padding: '3px 5px 15px 5px',\n  marginTop: '8px',\n  borderColor: 'black',\n  boxShadow: '0px 0px 8px 3px grey'\n};\nconst searchText = {\n  borderRadius: '.5rem',\n  height: '25px',\n  alignSelf: 'center',\n  marginLeft: '.5rem',\n  width: '200px',\n  flexShrink: '3',\n  textAlign: 'center'\n};\nconst resultStyles = {\n  textAlign: 'center',\n  marginTop: '20px',\n  fontSize: '40px'\n};\nexport default Leftbar;","map":{"version":3,"sources":["/Users/matthewschnapp/Projects/toolreact-ToolReact/client/src/components/leftbar/Leftbar.js"],"names":["React","ToolView","Tools","Leftbar","Component","constructor","props","state","id","toolNumber","results","lines","render","searchBar","e","onChange","searchText","searchButton","resultStyles","target","setState","search","loadId","then","catch","err","console","error","query","trim","map","match","ref","Results","length","result","i","Promise","all","Id","load","display","flexDirection","fontSize","width","height","borderRadius","alignSelf","textAlign","marginLeft","padding","marginTop","borderColor","boxShadow","flexShrink"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ToolView from '../tools/viewTools/ToolView';\nimport Tools from '../tools/viewTools/Tools';\n//change loadId import files to match accurate database\nclass Leftbar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: null,\n            toolNumber: \"\",\n            results: [],\n            lines: [],\n        };\n    }\n    render () {\n        const { results, toolNumber } = this.state;\n\n        return (\n            <div>\n            <div style={searchBar}>\n                <input type=\"text\" \n                       className=\"input\" \n                       id=\"search\"\n                       value={toolNumber}\n                       onChange={e => this.onChange(e)}\n                       placeholder=\"Enter Tool Number\" \n                       style={searchText}\n                       />\n                <button className=\"searchEx\" style={searchButton}>Search</button>\n            </div>\n            <div style={resultStyles}>\n                <Results results={results}/>\n            </div>\n            </div>\n        );\n    }\nonChange({ target: {toolNumber} }) {\n    const { id, lines } = this.state;\n    this.setState(() => ({ toolNumber}));\n    if(lines && id) {\n        return this.setState(() => ({\n            results: this.search(lines, id, toolNumber),\n        }));\n    }\n    loadId() \n        .then(({ id, lines }) => {\n            this.setState(() => ({\n                id, \n                lines, \n                results: this.search(lines, id, toolNumber),\n            }));\n        })\n    .catch(err => console.error(err)); \n    }\n    search(lines, id, query) {\n        return id \n            .search(query.trim())\n            .map(match => lines[match.ref]);\n    }\n}\nconst Results = ({ results }) => {\n    if(results.length) {\n        return (\n            <ul>\n                {results.map((result, i) => \n                <li key={i}>{result}</li>)}\n            </ul>\n        );\n    }\n    return <span>No Results</span>;\n};\nfunction loadId() {\n    return Promise.all([\n        import(Tools),\n        import(ToolView),\n    ]).then(([{ Id }, { id, lines }]) => {\n        return {\n            id: Id.load(id),\n            lines,\n        };\n    });\n}\nconst searchBar = {\n    display: 'flex',\n    flexDirection: 'column',\n}\nconst searchButton = {\n    fontSize: '20px',\n    width: 'auto',\n    height: '30px',\n    borderRadius: '.25rem',\n    alignSelf: 'center',\n    textAlign: 'center',\n    marginLeft: '.25rem',\n    padding: '3px 5px 15px 5px',\n    marginTop: '8px',\n    borderColor: 'black',\n    boxShadow: '0px 0px 8px 3px grey',\n\n}\nconst searchText = {\n    borderRadius: '.5rem',\n    height: '25px',\n    alignSelf: 'center',\n    marginLeft: '.5rem',\n    width: '200px',\n    flexShrink: '3',\n    textAlign: 'center',\n}\nconst resultStyles = {\n    textAlign: 'center',\n    marginTop: '20px',\n    fontSize: '40px',\n}\n\nexport default Leftbar;"]},"metadata":{},"sourceType":"module"}